DROP SEQUENCE people_sequence;
DROP TRIGGER tr_insert_id_people;
DROP TABLE PEOPLE CASCADE CONSTRAINTS;
DROP SEQUENCE bio_sequence;
DROP TRIGGER tr_insert_id_bio;
DROP TABLE BIOMETRIC_DATA CASCADE CONSTRAINTS;
DROP SEQUENCE appoint_sequence;
DROP TRIGGER tr_insert_id_appoint;
DROP TABLE APPOINTMENT CASCADE CONSTRAINTS;
DROP SEQUENCE appoint_exams_sequence;
DROP TRIGGER tr_insert_id_appoint_exams;
DROP TABLE APPOINTMENT_EXAMS CASCADE CONSTRAINTS;
DROP SEQUENCE exams_type_sequence;
DROP TRIGGER tr_insert_id_exams_type;
DROP TABLE EXAMS_TYPE CASCADE CONSTRAINTS;
DROP SEQUENCE exams_type_sequence;
DROP TRIGGER tr_insert_id_exams_type;
DROP TABLE APPOINTMENT_RESULTS CASCADE CONSTRAINTS;
DROP SEQUENCE appoint_results_sequence;
DROP TRIGGER tr_insert_id_appoint_results;
DROP TABLE EXAMS_TYPE CASCADE CONSTRAINTS;
DROP SEQUENCE ratings_sequence;
DROP TRIGGER tr_insert_id_ratings;
DROP TABLE RATINGS CASCADE CONSTRAINTS;
DROP SEQUENCE tech_sequence;
DROP TRIGGER tr_insert_id_tech;
DROP TABLE TECHNOLOGIES CASCADE CONSTRAINTS;


CREATE TABLE PEOPLE (
    ID INTEGER NOT NULL CONSTRAINT people_id_pk PRIMARY KEY,
    NAME VARCHAR(45) NOT NULL,
    EMAIL VARCHAR (45) NOT NULL,
    PASSWORD VARCHAR (45) NOT NULL,
    TYPE VARCHAR(45) NOT NULL
);

CREATE SEQUENCE people_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_people
BEFORE INSERT ON PEOPLE FOR EACH ROW
BEGIN

SELECT people_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE EXAMS_TYPE (
    ID INTEGER NOT NULL CONSTRAINT exams_type_id_pk PRIMARY KEY,
    NAME_EXAM VARCHAR(45)
);

CREATE SEQUENCE exams_type_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_exams_type
BEFORE INSERT ON EXAMS_TYPE FOR EACH ROW
BEGIN

SELECT exams_type_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE TECHNOLOGIES (
    ID INTEGER NOT NULL CONSTRAINT tech_id_pk PRIMARY KEY,
    NAME VARCHAR(45),
    DESCRIPTION VARCHAR(255),
    EXAM_TYPE INTEGER NOT NULL,
    CONSTRAINT FK_EXAM_TYPE_TECH FOREIGN KEY(EXAM_TYPE) REFERENCES EXAMS_TYPE (ID)
);

CREATE SEQUENCE tech_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_tech
BEFORE INSERT ON TECHNOLOGIES FOR EACH ROW
BEGIN

SELECT tech_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE APPOINTMENT (
    ID INTEGER NOT NULL CONSTRAINT appoint_id_pk PRIMARY KEY,
    NAME VARCHAR(45),
    PATIENT INTEGER NOT NULL,
    APPOINT_DATE DATE,
    EXAM_TYPE INTEGER NOT NULL,
    PENDENCY VARCHAR(45),
    MESSAGE VARCHAR(255),
    CONSTRAINT FK_PATIENT_APPOINT FOREIGN KEY(PATIENT) REFERENCES PEOPLE (ID),
    CONSTRAINT FK_EXAM_TYPE_APPOINT FOREIGN KEY(EXAM_TYPE) REFERENCES EXAMS_TYPE (ID)
);

CREATE SEQUENCE appoint_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_appoint
BEFORE INSERT ON APPOINTMENT FOR EACH ROW
BEGIN

SELECT appoint_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE BIOMETRIC_DATA (
    ID INTEGER NOT NULL CONSTRAINT bio_id_pk PRIMARY KEY,
    TYPE_TECH INTEGER NOT NULL,
    APPOINTMENT INTEGER NOT NULL,
    PATIENT INTEGER NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    CONSTRAINT FK_PATIENT_BIO FOREIGN KEY(PATIENT) REFERENCES PEOPLE (ID),
    CONSTRAINT FK_TECH_BIO FOREIGN KEY(TYPE_TECH) REFERENCES TECHNOLOGIES (ID)
    CONSTRAINT FK_APPOINT_BIO FOREIGN KEY(APPOINTMENT) REFERENCES APPOINTMENT (ID)
);

CREATE SEQUENCE bio_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_bio
BEFORE INSERT ON BIOMETRIC_DATA FOR EACH ROW
BEGIN

SELECT bio_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE APPOINTMENT_EXAMS (
    ID INTEGER NOT NULL CONSTRAINT appoint_exam_id_pk PRIMARY KEY,
    NAME_APPOINT VARCHAR(45) NOT NULL,
    TYPE_EXAM INTEGER NOT NULL,
    CONSTRAINT FK_TYPE_EXAM_APPOINT_EXAM FOREIGN KEY(TYPE_EXAM) REFERENCES EXAMS_TYPE(ID)
);

CREATE SEQUENCE appoint_exams_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_appoint_exams
BEFORE INSERT ON APPOINTMENT_EXAMS FOR EACH ROW
BEGIN

SELECT appoint_exams_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE APPOINTMENT_RESULTS (
    ID INTEGER NOT NULL CONSTRAINT appoint_result_id_pk PRIMARY KEY,
    APPOINTMENT INTEGER NOT NULL,
    MESSAGE VARCHAR(255),
    CONSTRAINT FK_APPOINTMENT_APPOINT_RESULT FOREIGN KEY(APPOINTMENT) REFERENCES APPOINTMENT (ID)
);

CREATE SEQUENCE appoint_results_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_appoint_results
BEFORE INSERT ON APPOINTMENT_RESULTS FOR EACH ROW
BEGIN

SELECT appoint_results_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/

CREATE TABLE RATINGS (
    ID INTEGER NOT NULL CONSTRAINT ratings_id_pk PRIMARY KEY,
    PATIENT INTEGER NOT NULL,
    TECHNOLOGY INTEGER NOT NULL,
    RATING VARCHAR(255),
    CONSTRAINT FK_PATIENT_RATING FOREIGN KEY(PATIENT) REFERENCES PEOPLE (ID),
    CONSTRAINT FK_TECH_RATING FOREIGN KEY(TECHNOLOGY) REFERENCES TECHNOLOGIES (ID)
);

CREATE SEQUENCE ratings_sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER tr_insert_id_ratings
BEFORE INSERT ON RATINGS FOR EACH ROW
BEGIN

SELECT ratings_sequence.NEXTVAL
INTO :NEW.ID
FROM DUAL;
END;

/
